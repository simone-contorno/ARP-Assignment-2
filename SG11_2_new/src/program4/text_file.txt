# 4. SHARED MEMORY WITH CIRCULAR BUFFER 

	The shared memory is a specif IPC (Inter Process Communication) transfer primitive
	that is based on the concept of Memory Mapping.This IPC mechanism allow to two or 
	more processes to read and/or write on the same memory segment.
	Since two or more processes can access to the same memory segment, it becomes
	a shared resources so it is necessary to implement an access policy using Semaphores.
	The aim of this project is to measure the data transfer time, so to do this the shared
	memory has to be implemented using a circular buffer with a size less than the data size
	which have to be transferred.

## HOW IT WORKS

	### PRODUCER

		Firstly the producer generates a random message, using the function randomMessage() that 
		takes, randomly, characters from the alphabet array and put them in a buffer with a size 
		equal to the size chosen by the user.
		Secondly, since the consumer will write the data received by the producer into a text file 
		called Message.txt, the producer checks if this text file already exist, in order to
		delete it, if it already exist, before sending data to the consumer.
		Thirdly the producer create a shared memory segment using the system call shm_open() and map 
		this memory segment using the mmap() system call. The memory segment address is then pointed by
		a void pointer.
		Then the producer creates and initializes three semaphores using the sem_open() and the
		sem_init() system call, this three semaphores will be used to impllement the access policy to 
		the shared memory.
		Lastly to implement the circular buffer in the shared memory, the producer use the pointer that
		contains the memory address of the shared memory (see below).
	
		#### CIRCULAR BUFFER (PRODUCER POINT OF VIEW)

			Firstly the initial address pointed by the ptr pointer is saved in another pointer called
			start, in order to come back to the start position when the final position of the circular buffer
			is reached.
			Secondly are locked the empty semaphore and the mutex semaphore using the sem_wait() system call.
			The empty semaphore has an initial value equal to the dimension of the circular buffer, so 
			each time the producer call it to write something in the circular buffer, it initial value is decreased
			in order to block the producer when there is no more space in the buffer(the buffer is full).
			The mutex semaphore is used only to implement the shared resource access policy between the producer
			and the consumer.
			Thirdly through the ptr pointer, the producer put the characters of the data to transfer, one at time,
			in the space location pointed by the pointer in that instant, then the address memory contained in ptr
			is increased using the pointer arithmetic 

	### CONSUMER

		...

		### CIRCULAR BUFFER (CONSUMER POINT OF VIEW)

			...